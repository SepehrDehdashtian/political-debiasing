[Arguments]

# project options
project_name  = HateSpeechARL

monitor       = {"metric": "loss", "decreasing": 1}
mode          = Train
control_type  = EndToEndARLDPV


# dataset options
dataset          = HateDemLoader

dataset_options  = {"dataset"       : {"dir": "HateSpeech", 
                                        "name": "HateDemLoader"
                                      },
                    "path"              : "/research/hal-datastore/datasets/original/hate_speech_detection/hate_data_yoder/sampled/demographic_category_hate_corpora.jsonl",
                    "kernel_numSamples" : 5000,
                    "onehot_s"          : 1        
                    }



batch_size_test  = 128
batch_size_train = 128

no_progress_bar = False

# model options
model_type    = { 
                  ; "feature_extractor": "preactresnet18smaller",
                  "encoder"  : "EncHateSpeech",
                  "target"   : "TgtHateSpeech",
                  "adversary": "AdvHateSpeech"
                  }


; model_options = { "feature_extractor": {"nfilters": 5, "r": 256},
; model_options = {"feature_extractor": {"dim": 256, "pretrained": 1, "normalize_output": 1},
model_options = { 
                ;  "feature_extractor": {"nfilters": 8, "r": 256, "normalize_output": 1},
                 "encoder"  : {"ndim":768, "r":128, "hdl":512},
                 "target": {"nout": 2, "r": 128, "hdl": 128},
                 "adversary": {"nout":2, "r":128, "hdl":64}
                }   



tau   = 0.0
beta  = 0.0
alpha = 0.0



# training options
nepochs                  = 10
check_val_every_n_epochs = 1
control_epoch            = 0
num_adv_train_iters      = 1

; learning_rate            = 1e-3
; learning_rate            = 5e-7
; learning_rate            = 1e-4
learning_rate            = 1e-5
; learning_rate            = 5e-6

optim_method             = {"encoder"  : "AdamW",
                            "target"   : "AdamW",
                            "adversary": "AdamW",
                            "feature_extractor" : "AdamW"
                            }

optim_options            = {"encoder"  : {"weight_decay": 2e-4},
                            "target"   : {"weight_decay": 2e-4},
                            "adversary": {"weight_decay": 2e-4},
                            "feature_extractor" : {"weight_decay": 2e-5}
                            }


scheduler_method         = CosineAnnealingLR
scheduler_options        = {"T_max": 5, "eta_min": 0}


# loss options
loss_type    = {"target"   : "Classification",
                "adversary": "Classification"
                }

loss_options = {"target"   : {},
                "adversary": {}
                }

# metric options
metric_target          = {"utility"  : "AccuracyUtility"}
                        ;   "ROC"      : "ROC_AUC_Score",
                        ;   "precision": "PrecisionScore",
                        ;   "recall"   : "RecallScore",
                        ;   "F1"       : "F1Score",
                        ;   "TP"       : "TruePositive",
                        ;   "FP"       : "FalsePositive",
                        ;   "TN"       : "TrueNegative",
                        ;   "FN"       : "FalseNegative"}

metric_target_options  = {"utility": {"one_hot": 0}}
                        ;   "ROC"      : {"num_classes": 80},
                        ;   "precision": {},
                        ;   "recall"   : {},
                        ;   "F1"       : {},
                        ;   "TP" : {},
                        ;   "FP" : {},
                        ;   "TN" : {},
                        ;   "FN" : {}}

metric_control         = {"SP"          : "DP_SingleLabel"
                          ; ,"dpv"         : "DemographicParity"
                          ; ,"alpha_beta"  : "NonParametricDependence"
                          ; ,"ZY"          : "NonParametricDependence"
                          ; ,"DEP_ZS"      : "NonParametricDependence"
                          ; ,"DEP_ZY"      : "NonParametricDependence"
                        ;   ,"DEP_XY"      : "NonParametricDependence"
                          ; ,"DEP_XS"      : "NonParametricDependence"
                          ; ,"XS"          : "NonParametricDependence"
                          ; ,"SY"          : "NonParametricDependence"
                          , "EO"           : "EO"
                          }

metric_control_options = {"SP"    : {
                                "num_y_classes": 2,
                                "num_s_classes": 2,
                                "num_sensitive_att": 1
                                    }
                          , "EO"    : {
                                "num_y_classes": 2,
                                "num_s_classes": 2,
                                "num_sensitive_att": 1
                                    }
                        ; ,"dpv"     : {
                        ;               "n_classes_y": 4,
                        ;               "n_classes_c": [96],
                        ;               "n_attributes_c": 1}
                        ; ,"alpha_beta": {"rff": 1, "score_list": {"HSIC": {}
                        ;                       , "KCC": {"lam": 0.001}
                        ;                       },
                        ;                       "kernel_z": "RFFGaussian",
                        ;                       "kernel_z_opts": {"rff_dim": 500, "sigma_numel_max": 1000},
                        ;                       "kernel_s": "RFFGaussian",
                        ;                       "kernel_s_opts": {"rff_dim": 500, "sigma_numel_max": 1000}}
                        ; ,"ZY": {"rff": 1, "score_list": {"HSIC": {}
                        ;                       , "KCC": {"lam": 0.001}
                        ;                       },
                        ;                       "kernel_z": "RFFGaussian",
                        ;                       "kernel_z_opts": {"rff_dim": 500, "sigma_numel_max": 1000},
                        ;                       "kernel_s": "RFFGaussian",
                        ;                       "kernel_s_opts": {"rff_dim": 500, "sigma_numel_max": 1000}}
                        ; ,"DEP_ZS": {"rff": 1, "score_list": {"HSIC": {}},
                        ;                       "kernel_z": "RFFLinear",
                        ;                       "kernel_z_opts": {},
                        ;                       "kernel_s": "RFFGaussian",
                        ;                       "kernel_s_opts": {"rff_dim": 500, "sigma_numel_max": 1000}}
                        ; ,"DEP_ZY": {"rff": 1, "score_list": {"HSIC": {}},
                        ;                       "kernel_z": "RFFLinear",
                        ;                       "kernel_z_opts": {},
                        ;                       "kernel_s": "RFFGaussian",
                        ;                       "kernel_s_opts": {"rff_dim": 500, "sigma_numel_max": 1000}}
                        ; ,"DEP_XY": {"rff": 1, "score_list": {"HSIC": {}},
                        ;                       "kernel_z": "RFFLinear",
                        ;                       "kernel_z_opts": {},
                        ;                       "kernel_s": "RFFGaussian",
                        ;                       "kernel_s_opts": {"rff_dim": 2000, "sigma_numel_max": 8000}}
                        ; ,"DEP_XS": {"rff": 1, "score_list": {"HSIC": {}},
                        ;                       "kernel_z": "RFFLinear",
                        ;                       "kernel_z_opts": {},
                        ;                       "kernel_s": "RFFGaussian",
                        ;                       "kernel_s_opts": {"rff_dim": 2000, "sigma_numel_max": 8000}}
                        ; ,"XS": {"rff": 1, "score_list": {"HSIC": {}
                        ;                       , "KCC": {"lam": 0.001}
                        ;                       },
                        ;                       "kernel_z": "RFFGaussian",
                        ;                       "kernel_z_opts": {"rff_dim": 2000, "sigma_numel_max": 8000},
                        ;                       "kernel_s": "RFFGaussian",
                        ;                       "kernel_s_opts": {"rff_dim": 2000, "sigma_numel_max": 8000}}
                        ; ,"SY": {"rff": 1, "score_list": {"HSIC": {}
                        ;                       , "KCC": {"lam": 0.001}
                        ;                       },
                        ;                       "kernel_z": "RFFGaussian",
                        ;                       "kernel_z_opts": {"rff_dim": 2000, "sigma_numel_max": 8000},
                        ;                       "kernel_s": "RFFGaussian",
                        ;                       "kernel_s_opts": {"rff_dim": 2000, "sigma_numel_max": 8000}}
                        }




nthreads = 3

